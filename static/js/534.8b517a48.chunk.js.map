{"version":3,"file":"static/js/534.8b517a48.chunk.js","mappings":"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","sources":["dice/GrimwildFooter.tsx","dice/HeaderFooter.tsx","dice/analysis/DiminishingPoolsAnalysis.tsx"],"sourcesContent":["import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import GrimwildFooter from \"./GrimwildFooter\";\nimport { AppBar, Divider, Grid, IconButton, Toolbar } from \"@mui/material\";\nimport { PropsWithChildren } from \"react\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport { colors } from \"../theme\";\n\nexport default function HeaderFooter({\n    title,\n    children,\n    back,\n}: PropsWithChildren<{ title: string; back?: string }>) {\n    document.title = title;\n    return (\n        <>\n            {/* <AppBar position=\"fixed\"> */}\n            <Toolbar sx={{ backgroundColor: colors.gray }}>\n                {back ? (\n                    <Grid item>\n                        <IconButton size=\"large\" edge=\"start\" href={back}>\n                            <ArrowBackIosIcon />\n                        </IconButton>\n                    </Grid>\n                ) : null}\n                <h1 style={{ marginLeft: 20 }}>{title}</h1>\n            </Toolbar>\n            {/* </AppBar> */}\n            <Divider sx={{ marginBottom: 8 }} />\n            {children}\n            <GrimwildFooter />\n        </>\n    );\n}\n","import { Grid, Table, TableBody, TableCell, TableRow, TableHead } from \"@mui/material\";\nimport {\n    BarChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Bar,\n    Rectangle,\n    ResponsiveContainer,\n    Label,\n} from \"recharts\";\nimport data from \"../../static/stats/pool_length.json\";\nimport HeaderFooter from \"../HeaderFooter\";\nimport { useEffect, useState } from \"react\";\nimport { colors } from \"../../theme\";\n\nexport type BarDatum = { name: string; proportion: number };\n\nexport function proportionFormat(value: number) {\n    const proportion = value > 1e-3 ? value.toFixed(3) : value === 0 ? 0 : value.toExponential(3);\n    const percent = value * 100;\n    const percentDisplay = percent < 1 ? percent.toPrecision(2) : percent.toPrecision(3);\n    return `${proportion} (${percentDisplay}%)`;\n}\n\nexport default function DiminishingPoolAnalysis() {\n    const [selectedNumDice, setSelectedNumDice] = useState(6);\n    const [selectedResults, setSelectedResults] = useState<BarDatum[]>([]);\n    useEffect(() => {\n        const row = data.find((row) => row.size === selectedNumDice);\n        console.debug(\"row\", row, selectedNumDice);\n        if (row != undefined) {\n            setSelectedResults(\n                Object.entries(row.rolls).map(([timesRolled, proportion]) => ({\n                    name: timesRolled,\n                    proportion,\n                }))\n            );\n        }\n    }, [selectedNumDice]);\n\n    return (\n        <HeaderFooter title=\"Diminishing Pools\" back=\"/dice\">\n            <Grid container>\n                <Grid item xs={12} sm={2}>\n                    <Table>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell>Dice</TableCell>\n                                <TableCell align=\"right\">Average rolls until depleted</TableCell>\n                            </TableRow>\n                            {data.map((row, i) => (\n                                <TableRow\n                                    key={i}\n                                    hover={true}\n                                    selected={row.size === selectedNumDice}\n                                    onClick={() => {\n                                        setSelectedNumDice(row.size);\n                                    }}\n                                >\n                                    <TableCell>{row.size}</TableCell>\n                                    <TableCell align=\"right\">{row.mean.toFixed(3)}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Grid>\n                <Grid item xs={12} sm={10} sx={{ minHeight: { xs: \"90vh\", sm: 100 } }}>\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart\n                            width={4}\n                            height={4}\n                            data={selectedResults}\n                            margin={{\n                                top: 5,\n                                right: 30,\n                                left: 20,\n                                bottom: 5,\n                            }}\n                        >\n                            <XAxis dataKey=\"name\" dy={0}>\n                                {/* <Label >Number of rolls until pool is depleted</Label> */}\n                            </XAxis>\n                            <YAxis />\n                            <Tooltip\n                                cursor={{ fill: colors.gray }}\n                                contentStyle={{ backgroundColor: colors.darkGray }}\n                                labelFormatter={(value) => {\n                                    return `${value} roll${value == 1 ? \"\" : \"s\"} until depletion`;\n                                }}\n                                formatter={proportionFormat}\n                            />\n                            {/* <Legend /> */}\n\n                            <Bar\n                                dataKey=\"proportion\"\n                                fill={colors.blue}\n                                activeBar={<Rectangle fill={colors.green} stroke={colors.black} />}\n                            />\n                            {/* <ReferenceLine x={3.2} strokeWidth={3} stroke=\"red\" /> */}\n                        </BarChart>\n                    </ResponsiveContainer>\n                </Grid>\n            </Grid>\n        </HeaderFooter>\n    );\n}\n"],"names":["GrimwildFooter","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","component","display","flexDirection","backgroundColor","theme","palette","grey","Container","maxWidth","Typography","variant","align","Link","href","target","rel","OpenInNewIcon","fontSize","HeaderFooter","_ref","title","back","document","Toolbar","colors","gray","Grid","item","IconButton","size","edge","ArrowBackIosIcon","style","marginLeft","Divider","marginBottom","proportionFormat","value","proportion","toFixed","toExponential","percent","percentDisplay","toPrecision","concat","DiminishingPoolAnalysis","selectedNumDice","setSelectedNumDice","useState","selectedResults","setSelectedResults","useEffect","row","data","find","console","debug","undefined","Object","entries","rolls","map","timesRolled","name","container","xs","sm","Table","TableBody","TableRow","TableCell","i","hover","selected","onClick","mean","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","XAxis","dataKey","dy","YAxis","Tooltip","cursor","fill","contentStyle","darkGray","labelFormatter","formatter","Bar","blue","activeBar","Rectangle","green","stroke","black"],"sourceRoot":""}