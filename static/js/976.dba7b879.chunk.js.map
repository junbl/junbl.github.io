{"version":3,"file":"static/js/976.dba7b879.chunk.js","mappings":"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","sources":["dice/GrimwildFooter.tsx","dice/HeaderFooter.tsx","dice/crucible/D66.tsx","dice/crucible/Crucible.tsx","dice/crucible/GmCrucible.tsx"],"sourcesContent":["import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import GrimwildFooter from \"./GrimwildFooter\";\nimport { AppBar, Divider, Grid, IconButton, Toolbar } from \"@mui/material\";\nimport { PropsWithChildren } from \"react\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport { colors } from \"../theme\";\n\nexport default function HeaderFooter({\n    title,\n    children,\n    back,\n}: PropsWithChildren<{ title: string; back?: string }>) {\n    document.title = title;\n    return (\n        <>\n            {/* <AppBar position=\"fixed\"> */}\n            <Toolbar sx={{ backgroundColor: colors.gray }}>\n                {back ? (\n                    <Grid item>\n                        <IconButton size=\"large\" edge=\"start\" href={back}>\n                            <ArrowBackIosIcon />\n                        </IconButton>\n                    </Grid>\n                ) : null}\n                <h1 style={{ marginLeft: 20 }}>{title}</h1>\n            </Toolbar>\n            {/* </AppBar> */}\n            <Divider sx={{ marginBottom: 8 }} />\n            {children}\n            <GrimwildFooter />\n        </>\n    );\n}\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableRow, Theme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nexport type SelectedCell = {\n    row: number;\n    column: number;\n};\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {},\n    table: {},\n}));\nexport default function D66({ table, selected }: { table: string[][]; selected: string[] }) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={(props) => <Paper className={classes.root} {...props}></Paper>}>\n            {/* <Table padding={{xs: \"none\", sm: \"normal\"}}> */}\n            <Table size=\"small\">\n                <TableBody>\n                    {table.map((row, r) => (\n                        <TableRow\n                            key={r}\n                            sx={{\n                                // backgroundColor: \"yellow\",\n                                // fontSize: \"100pt\",\n                                // borderBottom: \"2px solid black\",\n                                \"& td\": {\n                                    fontSize: {xs: \"0.8rem\", sm: \"1rem\"}\n                                },\n                            }}\n                        >\n                            {row.map((cell, c) => (\n                                <TableCell\n                                    className={classes.table}\n                                    key={cell + c}\n                                    sx={\n                                        selected.includes(cell)\n                                            ? {\n                                                  backgroundColor: (theme) =>\n                                                      theme.palette.primary.main,\n                                                  color: (theme) =>\n                                                      theme.palette.background.default,\n                                              }\n                                            : undefined\n                                    }\n                                >\n                                    {cell}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Tooltip,\n    Typography,\n} from \"@mui/material\";\nimport D66 from \"./D66\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport SwapHorizIcon from \"@mui/icons-material/SwapHoriz\";\nimport SwapCallsIcon from \"@mui/icons-material/SwapCalls\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport { colors } from \"../../theme\";\n\nexport function d(sides: number): number {\n    return Math.floor(Math.random() * sides);\n}\n\nexport function d6(): number {\n    return d(6);\n}\n\nexport type AddlOption = { name: string; color?: keyof typeof colors };\n\nfunction CrucibleResults({\n    options,\n    n = 2,\n    additionalOptions,\n    disableBackwards = false,\n}: {\n    options: string[][];\n    n?: number;\n    additionalOptions?: AddlOption[];\n    disableBackwards?: boolean;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const defaultSelection = () => {\n        if (options.length == 0 || options[0].length == 0) {\n            return [[] as string[], false] as const;\n        }\n        let shuffledOptions = options.map((row, index) => ({\n            row,\n            index,\n        }));\n        if (!disableBackwards) {\n            shuffledOptions = _.shuffle(shuffledOptions);\n        }\n        const selectedRows = shuffledOptions.slice(0, n);\n        let of = selectedRows[0].index > selectedRows[selectedRows.length - 1].index;\n        const firstRowLast = selectedRows[selectedRows.length - 1].index == 0;\n        const selected = selectedRows.map((row) => row.row[d(row.row.length)]);\n        if (of && firstRowLast && !selected[selected.length - 1].endsWith(\"ing\")) {\n            of = false;\n            selected.reverse();\n        }\n        return [selected, of] as const;\n    };\n    const [s, o] = defaultSelection();\n    const [selected, setSelected] = useState<string[]>(s);\n    const [of, setOf] = useState(o);\n    const randomAdditionalOption = () => (additionalOptions ? d(additionalOptions.length - 1) : 0);\n    const [selectedAdditionalOption, setSelectedAdditionalOption] = useState<OptionIndex>(\n        randomAdditionalOption()\n    );\n    const c = additionalOptions && additionalOptions[Number(selectedAdditionalOption)].color;\n    const selectedColor = c && colors[c];\n    const rerollAll = () => {\n        const [s, o] = defaultSelection();\n        setSelected(s);\n        setOf(o);\n        setSelectedAdditionalOption(randomAdditionalOption());\n    };\n    useEffect(rerollAll, [options]);\n\n    if (options.length == 0 || !options.some((row) => row.length > 0)) {\n        return null;\n    }\n    let selectedForDisplay = selected;\n    if (of) {\n        selectedForDisplay = [...selected];\n        selectedForDisplay.splice(selected.length - 1, 0, \"of\");\n    }\n\n    const onOptionClick = (\n        option: string,\n        optionSelectedIndex: number,\n        optionIsSelected: boolean,\n        row: string[],\n        rowIndex: number\n    ) => {\n        const newSelected = [...selected];\n        if (optionIsSelected) {\n            // console.debug(\"already selected, removing\");\n            newSelected.splice(optionSelectedIndex, 1);\n        } else if (options.length == n) {\n            // console.debug(`max options selected, setting option for ${rowIndex}`);\n            newSelected[rowIndex] = option;\n        } else {\n            let otherSelectedInRowIndex = selected.findIndex((s) => row.includes(s));\n            if (newSelected.length >= n) {\n                let indexToReplace = 0;\n                if (otherSelectedInRowIndex == -1) {\n                    let closestRowIndex = 0;\n                    for (const [rowIndexForSelected, selectedIndex] of selected.map(\n                        (s, index) => [options.findIndex((row) => row.includes(s)), index] as const\n                    )) {\n                        if (\n                            Math.abs(rowIndexForSelected - rowIndex) <=\n                            Math.abs(closestRowIndex - rowIndex)\n                        ) {\n                            closestRowIndex = rowIndexForSelected;\n                            indexToReplace = selectedIndex;\n                        }\n                    }\n                } else {\n                    // console.debug(\"selected more than max options, replacing other in row\");\n                    indexToReplace = otherSelectedInRowIndex;\n                }\n                newSelected.splice(indexToReplace, 1, option);\n            } else {\n                if (otherSelectedInRowIndex !== -1) {\n                    // console.debug(\"selected less than max + option in row already selected\");\n                    newSelected.splice(otherSelectedInRowIndex, 1, option);\n                } else {\n                    // console.debug(\"selected less than max options, inserting at start\");\n                    newSelected.splice(rowIndex, 0, option);\n                }\n            }\n        }\n        setSelected(newSelected);\n    };\n    return (\n        <Card\n            sx={{\n                border: `2px solid ${selectedColor}`,\n                display: \"flex\",\n                maxWidth: \"600px\",\n                textAlign: \"center\",\n            }}\n        >\n            <CardContent sx={{ marginTop: \"10px\" }}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" rowSpacing=\"5px\">\n                        {options.map((row, rowIndex) =>\n                            row.map((option) => {\n                                const optionSelectedIndex = selected.indexOf(option);\n                                const optionIsSelected = optionSelectedIndex != -1;\n                                return (\n                                    <Grid key={option} item xs={12 / row.length}>\n                                        <Button\n                                            variant={optionIsSelected ? \"contained\" : \"outlined\"}\n                                            onClick={() => {\n                                                onOptionClick(\n                                                    option,\n                                                    optionSelectedIndex,\n                                                    optionIsSelected,\n                                                    row,\n                                                    rowIndex\n                                                );\n                                            }}\n                                        >\n                                            {option}\n                                        </Button>\n                                    </Grid>\n                                );\n                            })\n                        )}\n                        <Grid item xs={12} margin=\"10px\">\n                            <Typography\n                                variant=\"h3\"\n                                align=\"center\"\n                                sx={{ minHeight: { xs: \"120px\", sm: \"60px\" } }}\n                            >\n                                {selectedForDisplay.join(\" \")}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing=\"5px\" justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapHorizIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                    }}\n                                >\n                                    Swap\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={of ? <RemoveIcon /> : <AddIcon />}\n                                    onClick={() => {\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Of\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapCallsIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Swap and Toggle Of\n                                </Button>\n                            </Grid>\n                        </Grid>\n                        {additionalOptions != null && selectedAdditionalOption != null && (\n                            <Grid item xs={12}>\n                                <AdditionalOptions\n                                    options={additionalOptions}\n                                    selected={selectedAdditionalOption}\n                                    setSelected={setSelectedAdditionalOption}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                </div>\n            </CardContent>\n            <CardActions>\n                <Tooltip title=\"Select new options without rerolling on the tables\">\n                    <IconButton\n                        onClick={() => {\n                            rollDiceAnimation(rollButtonRef);\n                            rerollAll();\n                        }}\n                        sx={{ marginLeft: \"auto\" }}\n                    >\n                        <CasinoIcon ref={rollButtonRef} />\n                    </IconButton>\n                </Tooltip>\n            </CardActions>\n        </Card>\n    );\n}\n\ntype OptionIndex = string | number;\nfunction AdditionalOptions({\n    options,\n    selected,\n    setSelected,\n}: {\n    options: AddlOption[];\n    selected: OptionIndex;\n    setSelected: Dispatch<SetStateAction<OptionIndex>>;\n}) {\n    const selectedString = selected.toString();\n    const selectedNumber = Number(selected);\n    const selectedColor = options[selectedNumber].color;\n    return (\n        <Select\n            value={selectedString}\n            // label=\"School of Magic\"\n            onChange={(e: SelectChangeEvent) => setSelected(e.target.value)}\n            autoWidth\n            sx={{\n                minWidth: \"200px\",\n                marginTop: \"20px\",\n                fontSize: \"14pt\",\n                border: `2px solid ${selectedColor && colors[selectedColor]}`,\n            }}\n        >\n            {options.map((option, index) => (\n                <MenuItem key={option.name} value={index}>\n                    {option.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nfunction rollDiceAnimation(rollButtonRef: React.RefObject<SVGSVGElement>) {\n    const rollButton = rollButtonRef.current;\n    if (rollButton) {\n        rollButton.classList.add(\"roll-dice\");\n        setTimeout(() => {\n            rollButton.classList.remove(\"roll-dice\");\n        }, 400);\n    }\n}\n\nexport default function Crucible({\n    tables,\n    titles,\n    additionalOptions,\n    disableBackwards = false,\n}: {\n    tables: string[][][];\n    titles?: string[];\n    additionalOptions?: AddlOption[];\n    disableBackwards?: boolean;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const [selectedInTables, setSelectedInTables] = useState<string[][]>(\n        Array(tables.length).fill([])\n    );\n    const roll = (_e: React.MouseEvent) => {\n        rollDiceAnimation(rollButtonRef);\n        const newSelectedInTables = [];\n        for (const i in tables) {\n            const selected = [];\n            const row = d6();\n            const column = d6();\n            const rc = tables[i][row][column];\n            const cr = tables[i][column][row];\n            selected.push(rc);\n            if (rc != cr) {\n                selected.push(cr);\n            }\n            newSelectedInTables.push(selected);\n        }\n        setSelectedInTables(newSelectedInTables);\n    };\n\n    return (\n        <>\n            <div style={{ display: \"flex\", alignContent: \"center\" }}>\n                <Grid container spacing={2} justifyContent=\"center\">\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\"\n                                onClick={roll}\n                                startIcon={<CasinoIcon ref={rollButtonRef} />}\n                                sx={{\n                                    minHeight: \"50px\",\n                                    minWidth: \"100px\",\n                                    fontSize: \"20pt\",\n                                }}\n                            >\n                                Roll!\n                            </Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <CrucibleResults\n                                options={selectedInTables}\n                                additionalOptions={additionalOptions}\n                                disableBackwards={disableBackwards}\n                            />\n                        </div>\n                    </Grid>\n                    {tables.map((table, index) => {\n                        return (\n                            <Grid key={index} item>\n                                {/* xs={12} lg={tables.length % 2 ? 12 : 6} xl={tables.length % 3 ? 12 : 4}> */}\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        maxWidth: \"95vw\",\n                                        overflowX: \"scroll\",\n                                    }}\n                                >\n                                    <Card\n                                        sx={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                        }}\n                                    >\n                                        {titles && titles[index] != undefined ? (\n                                            <>\n                                                <CardHeader title={titles[index]} />\n                                                <br />\n                                            </>\n                                        ) : null}\n                                        <CardContent>\n                                            <D66 table={table} selected={selectedInTables[index]} />\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </>\n    );\n}\n","import gm1 from \"../../static/d66/gm1.json\";\nimport gm2 from \"../../static/d66/gm2.json\";\nimport Crucible from \"./Crucible\";\nimport HeaderFooter from \"../HeaderFooter\";\n\nexport default function GmCrucible() {\n    document.title = \"GM Crucible\";\n    return (\n        <HeaderFooter title=\"GM Crucible\" back=\"/dice\">\n            <Crucible disableBackwards={true} tables={[gm1, gm2]} />\n        </HeaderFooter>\n    );\n}\n"],"names":["GrimwildFooter","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","component","display","flexDirection","backgroundColor","theme","palette","grey","Container","maxWidth","Typography","variant","align","Link","href","target","rel","OpenInNewIcon","fontSize","HeaderFooter","_ref","title","back","document","Toolbar","colors","gray","Grid","item","IconButton","size","edge","ArrowBackIosIcon","style","marginLeft","Divider","marginBottom","useStyles","makeStyles","root","table","D66","selected","classes","TableContainer","props","Paper","className","Table","TableBody","map","row","r","TableRow","xs","sm","cell","c","TableCell","includes","primary","main","color","background","default","undefined","d","sides","Math","floor","random","d6","CrucibleResults","options","n","additionalOptions","disableBackwards","rollButtonRef","useRef","defaultSelection","length","shuffledOptions","index","_","selectedRows","slice","of","firstRowLast","endsWith","reverse","s","o","setSelected","useState","setOf","randomAdditionalOption","selectedAdditionalOption","setSelectedAdditionalOption","Number","selectedColor","rerollAll","useEffect","some","selectedForDisplay","splice","Card","border","concat","textAlign","CardContent","marginTop","alignItems","container","justifyContent","rowSpacing","rowIndex","option","optionSelectedIndex","indexOf","optionIsSelected","Button","onClick","onOptionClick","newSelected","otherSelectedInRowIndex","findIndex","indexToReplace","closestRowIndex","rowIndexForSelected","selectedIndex","abs","margin","join","spacing","startIcon","SwapHorizIcon","toReversed","RemoveIcon","AddIcon","SwapCallsIcon","AdditionalOptions","CardActions","Tooltip","rollDiceAnimation","CasinoIcon","ref","_ref2","selectedString","toString","Select","value","onChange","e","autoWidth","minWidth","MenuItem","name","rollButton","current","classList","add","setTimeout","remove","Crucible","_ref3","tables","titles","selectedInTables","setSelectedInTables","Array","fill","alignContent","_e","newSelectedInTables","i","column","rc","cr","push","overflowX","CardHeader","GmCrucible","gm1","gm2"],"sourceRoot":""}