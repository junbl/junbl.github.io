{"version":3,"file":"static/js/733.873af79f.chunk.js","mappings":"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","sources":["dice/GrimwildFooter.tsx","dice/crucible/D66.tsx","dice/crucible/Crucible.tsx","dice/crucible/SpellCrucible.tsx"],"sourcesContent":["import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableRow, Theme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nexport type SelectedCell = {\n    row: number;\n    column: number;\n};\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {},\n    table: {},\n}));\nexport default function D66({ table, selected }: { table: string[][]; selected: string[] }) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={(props) => <Paper className={classes.root} {...props}></Paper>}>\n            {/* <Table padding={{xs: \"none\", sm: \"normal\"}}> */}\n            <Table >\n                <TableBody>\n                    {table.map((row, r) => (\n                        <TableRow\n                            key={r}\n                            sx={{\n                                // backgroundColor: \"yellow\",\n                                // fontSize: \"100pt\",\n                                // borderBottom: \"2px solid black\",\n                                \"& td\": {\n                                    fontSize: {xs: \"0.8rem\", sm: \"1rem\"}\n                                },\n                            }}\n                        >\n                            {row.map((cell, c) => (\n                                <TableCell\n                                    className={classes.table}\n                                    key={cell + c}\n                                    sx={\n                                        selected.includes(cell)\n                                            ? {\n                                                  backgroundColor: (theme) =>\n                                                      theme.palette.primary.main,\n                                                  color: (theme) =>\n                                                      theme.palette.background.default,\n                                              }\n                                            : undefined\n                                    }\n                                >\n                                    {cell}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Tooltip,\n    Typography,\n} from \"@mui/material\";\nimport D66 from \"./D66\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport SwapHorizIcon from \"@mui/icons-material/SwapHoriz\";\nimport SwapCallsIcon from \"@mui/icons-material/SwapCalls\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport { colors } from \"../../theme\";\n\nexport function d(sides: number): number {\n    return Math.floor(Math.random() * sides);\n}\n\nexport function d6(): number {\n    return d(6);\n}\n\nexport type AddlOption = { name: string; color?: keyof typeof colors };\n\nfunction CrucibleResults({\n    options,\n    n = 2,\n    additionalOptions,\n}: {\n    options: string[][];\n    n?: number;\n    additionalOptions?: AddlOption[];\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const defaultSelection = () => {\n        if (options.length == 0 || options[0].length == 0) {\n            return [[] as string[], false] as const;\n        }\n        const shuffledOptions = _.shuffle(\n            options.map((row, index) => ({\n                row,\n                index,\n            }))\n        );\n        const selectedRows = shuffledOptions.slice(0, n);\n        let of = selectedRows[0].index > selectedRows[selectedRows.length - 1].index;\n        const firstRowLast = selectedRows[selectedRows.length - 1].index == 0;\n        const selected = selectedRows.map((row) => row.row[d(row.row.length)]);\n        if (of && firstRowLast && !selected[selected.length - 1].endsWith(\"ing\")) {\n            of = false;\n            selected.reverse();\n        }\n        return [selected, of] as const;\n    };\n    const [s, o] = defaultSelection();\n    const [selected, setSelected] = useState<string[]>(s);\n    const [of, setOf] = useState(o);\n    const randomAdditionalOption = () => (additionalOptions ? d(additionalOptions.length - 1) : 0);\n    const [selectedAdditionalOption, setSelectedAdditionalOption] = useState<OptionIndex>(\n        randomAdditionalOption()\n    );\n    const c = additionalOptions && additionalOptions[Number(selectedAdditionalOption)].color;\n    const selectedColor = c && colors[c];\n    const rerollAll = () => {\n        const [s, o] = defaultSelection();\n        setSelected(s);\n        setOf(o);\n        setSelectedAdditionalOption(randomAdditionalOption());\n    };\n    useEffect(rerollAll, [options]);\n\n    if (options.length == 0 || !options.some((row) => row.length > 0)) {\n        return null;\n    }\n    let selectedForDisplay = selected;\n    if (of) {\n        selectedForDisplay = [...selected];\n        selectedForDisplay.splice(selected.length - 1, 0, \"of\");\n    }\n\n    const onOptionClick = (\n        option: string,\n        optionSelectedIndex: number,\n        optionIsSelected: boolean,\n        row: string[],\n        rowIndex: number\n    ) => {\n        const newSelected = [...selected];\n        if (optionIsSelected) {\n            // console.debug(\"already selected, removing\");\n            newSelected.splice(optionSelectedIndex, 1);\n        } else if (options.length == n) {\n            // console.debug(`max options selected, setting option for ${rowIndex}`);\n            newSelected[rowIndex] = option;\n        } else {\n            let otherSelectedInRowIndex = selected.findIndex((s) => row.includes(s));\n            if (newSelected.length >= n) {\n                let indexToReplace = 0;\n                if (otherSelectedInRowIndex == -1) {\n                    let closestRowIndex = 0;\n                    for (const [rowIndexForSelected, selectedIndex] of selected.map(\n                        (s, index) => [options.findIndex((row) => row.includes(s)), index] as const\n                    )) {\n                        if (\n                            Math.abs(rowIndexForSelected - rowIndex) <\n                            Math.abs(closestRowIndex - rowIndex)\n                        ) {\n                            closestRowIndex = rowIndexForSelected;\n                            indexToReplace = selectedIndex;\n                        }\n                    }\n                } else {\n                    // console.debug(\"selected more than max options, replacing other in row\");\n                    indexToReplace = otherSelectedInRowIndex;\n                }\n                newSelected.splice(indexToReplace, 1, option);\n            } else {\n                if (otherSelectedInRowIndex !== -1) {\n                    // console.debug(\"selected less than max + option in row already selected\");\n                    newSelected.splice(otherSelectedInRowIndex, 1, option);\n                } else {\n                    // console.debug(\"selected less than max options, inserting at start\");\n                    newSelected.unshift(option);\n                }\n            }\n        }\n        setSelected(newSelected);\n    };\n    return (\n        <Card\n            sx={{\n                border: `2px solid ${selectedColor}`,\n                display: \"flex\",\n                maxWidth: \"600px\",\n                textAlign: \"center\",\n            }}\n        >\n            <CardContent sx={{ marginTop: \"10px\" }}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" rowSpacing=\"5px\">\n                        {options.map((row, rowIndex) =>\n                            row.map((option) => {\n                                const optionSelectedIndex = selected.indexOf(option);\n                                const optionIsSelected = optionSelectedIndex != -1;\n                                return (\n                                    <Grid key={option} item xs={12 / row.length}>\n                                        <Button\n                                            variant={optionIsSelected ? \"contained\" : \"outlined\"}\n                                            onClick={() => {\n                                                onOptionClick(\n                                                    option,\n                                                    optionSelectedIndex,\n                                                    optionIsSelected,\n                                                    row,\n                                                    rowIndex\n                                                );\n                                            }}\n                                        >\n                                            {option}\n                                        </Button>\n                                    </Grid>\n                                );\n                            })\n                        )}\n                        <Grid item xs={12} margin=\"10px\">\n                            <Typography\n                                variant=\"h3\"\n                                align=\"center\"\n                                sx={{ minHeight: { xs: \"120px\", sm: \"60px\" } }}\n                            >\n                                {selectedForDisplay.join(\" \")}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing=\"5px\" justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapHorizIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                    }}\n                                >\n                                    Swap\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={of ? <RemoveIcon /> : <AddIcon />}\n                                    onClick={() => {\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Of\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapCallsIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Swap and Toggle Of\n                                </Button>\n                            </Grid>\n                        </Grid>\n                        {additionalOptions != null && selectedAdditionalOption != null && (\n                            <Grid item xs={12}>\n                                <AdditionalOptions\n                                    options={additionalOptions}\n                                    selected={selectedAdditionalOption}\n                                    setSelected={setSelectedAdditionalOption}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                </div>\n            </CardContent>\n            <CardActions>\n                <Tooltip title=\"Select new options without rerolling on the tables\">\n                    <IconButton\n                        onClick={() => {\n                            rollDiceAnimation(rollButtonRef);\n                            rerollAll();\n                        }}\n                        sx={{ marginLeft: \"auto\" }}\n                    >\n                        <CasinoIcon ref={rollButtonRef} />\n                    </IconButton>\n                </Tooltip>\n            </CardActions>\n        </Card>\n    );\n}\n\ntype OptionIndex = string | number;\nfunction AdditionalOptions({\n    options,\n    selected,\n    setSelected,\n}: {\n    options: AddlOption[];\n    selected: OptionIndex;\n    setSelected: Dispatch<SetStateAction<OptionIndex>>;\n}) {\n    const selectedString = selected.toString();\n    const selectedNumber = Number(selected);\n    const selectedColor = options[selectedNumber].color;\n    return (\n        <Select\n            value={selectedString}\n            // label=\"School of Magic\"\n            onChange={(e: SelectChangeEvent) => setSelected(e.target.value)}\n            autoWidth\n            sx={{\n                minWidth: \"200px\",\n                marginTop: \"20px\",\n                fontSize: \"14pt\",\n                border: `2px solid ${selectedColor && colors[selectedColor]}`,\n            }}\n        >\n            {options.map((option, index) => (\n                <MenuItem key={option.name} value={index}>\n                    {option.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nfunction rollDiceAnimation(rollButtonRef: React.RefObject<SVGSVGElement>) {\n    const rollButton = rollButtonRef.current;\n    if (rollButton) {\n        rollButton.classList.add(\"roll-dice\");\n        setTimeout(() => {\n            rollButton.classList.remove(\"roll-dice\");\n        }, 400);\n    }\n}\n\nexport default function Crucible({\n    tables,\n    titles,\n    additionalOptions,\n}: {\n    tables: string[][][];\n    titles?: string[];\n    additionalOptions?: AddlOption[];\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const [selectedInTables, setSelectedInTables] = useState<string[][]>(\n        Array(tables.length).fill([])\n    );\n    const roll = (_e: React.MouseEvent) => {\n        rollDiceAnimation(rollButtonRef);\n        const newSelectedInTables = [];\n        for (const i in tables) {\n            const selected = [];\n            const row = d6();\n            const column = d6();\n            const rc = tables[i][row][column];\n            const cr = tables[i][column][row];\n            selected.push(rc);\n            if (rc != cr) {\n                selected.push(cr);\n            }\n            newSelectedInTables.push(selected);\n        }\n        setSelectedInTables(newSelectedInTables);\n    };\n\n    return (\n        <>\n            <div style={{ display: \"flex\", alignContent: \"center\" }}>\n                <Grid container spacing={2} justifyContent=\"center\">\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\"\n                                onClick={roll}\n                                startIcon={<CasinoIcon ref={rollButtonRef} />}\n                                sx={{\n                                    minHeight: \"50px\",\n                                    minWidth: \"100px\",\n                                    fontSize: \"20pt\",\n                                }}\n                            >\n                                Roll!\n                            </Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <CrucibleResults\n                                options={selectedInTables}\n                                additionalOptions={additionalOptions}\n                            />\n                        </div>\n                    </Grid>\n                    {tables.map((table, index) => {\n                        return (\n                            <Grid key={index} item>\n                                {/* xs={12} lg={tables.length % 2 ? 12 : 6} xl={tables.length % 3 ? 12 : 4}> */}\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        maxWidth: \"95vw\",\n                                        overflowX: \"scroll\",\n                                    }}\n                                >\n                                    <Card\n                                        sx={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                        }}\n                                    >\n                                        {titles && titles[index] != undefined ? (\n                                            <>\n                                                <CardHeader title={titles[index]} />\n                                                <br />\n                                            </>\n                                        ) : null}\n                                        <CardContent>\n                                            <D66 table={table} selected={selectedInTables[index]} />\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </>\n    );\n}\n","import spellForm from \"../../static/d66/spell_form.json\";\nimport spellMaterial from \"../../static/d66/spell_material.json\";\nimport spellStyle from \"../../static/d66/spell_style.json\";\nimport schools from \"../../static/d66/schools.json\";\nimport Crucible, { AddlOption } from \"./Crucible\";\nimport GrimwildFooter from \"../GrimwildFooter\";\nimport { Divider } from \"@mui/material\";\n\nexport default function SpellCrucible() {\n    document.title = \"Spell Crucible\";\n    return (\n        <>\n            <h1 style={{ marginLeft: 20 }}>Spell Crucible</h1>\n            <Divider sx={{ marginBottom: 8 }} />\n            <Crucible\n                tables={[spellStyle, spellMaterial, spellForm]}\n                titles={[\"Style\", \"Material\", \"Form\"]}\n                additionalOptions={schools as AddlOption[]}\n            />\n            <GrimwildFooter />\n        </>\n    );\n}\n"],"names":["GrimwildFooter","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","component","display","flexDirection","backgroundColor","theme","palette","grey","Container","maxWidth","Typography","variant","align","Link","href","target","rel","OpenInNewIcon","fontSize","useStyles","makeStyles","root","table","D66","_ref","selected","classes","TableContainer","props","Paper","className","Table","TableBody","map","row","r","TableRow","xs","sm","cell","c","TableCell","includes","primary","main","color","background","default","undefined","d","sides","Math","floor","random","d6","CrucibleResults","options","n","additionalOptions","rollButtonRef","useRef","defaultSelection","length","selectedRows","_","index","slice","of","firstRowLast","endsWith","reverse","s","o","setSelected","useState","setOf","randomAdditionalOption","selectedAdditionalOption","setSelectedAdditionalOption","Number","selectedColor","colors","rerollAll","useEffect","some","selectedForDisplay","splice","Card","border","concat","textAlign","CardContent","marginTop","style","alignItems","Grid","container","justifyContent","rowSpacing","rowIndex","option","optionSelectedIndex","indexOf","optionIsSelected","item","Button","onClick","onOptionClick","newSelected","otherSelectedInRowIndex","findIndex","indexToReplace","closestRowIndex","rowIndexForSelected","selectedIndex","abs","unshift","margin","join","spacing","startIcon","SwapHorizIcon","toReversed","RemoveIcon","AddIcon","SwapCallsIcon","AdditionalOptions","CardActions","Tooltip","title","IconButton","rollDiceAnimation","marginLeft","CasinoIcon","ref","_ref2","selectedString","toString","Select","value","onChange","e","autoWidth","minWidth","MenuItem","name","rollButton","current","classList","add","setTimeout","remove","Crucible","_ref3","tables","titles","selectedInTables","setSelectedInTables","Array","fill","alignContent","size","_e","newSelectedInTables","i","column","rc","cr","push","overflowX","CardHeader","SpellCrucible","document","Divider","marginBottom","spellStyle","spellMaterial","spellForm","schools"],"sourceRoot":""}