{"version":3,"file":"static/js/733.77047c4e.chunk.js","mappings":"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","sources":["dice/GrimwildFooter.tsx","dice/HeaderFooter.tsx","dice/crucible/D66.tsx","dice/crucible/Crucible.tsx","dice/crucible/SpellCrucible.tsx"],"sourcesContent":["import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import GrimwildFooter from \"./GrimwildFooter\";\nimport { Box, Dialog, DialogContent, Divider, IconButton, Toolbar, Tooltip } from \"@mui/material\";\nimport { PropsWithChildren, ReactElement, useState } from \"react\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport { colors } from \"../theme\";\n\nexport default function HeaderFooter({\n    title,\n    children,\n    back,\n    info,\n    infoDialog,\n}: PropsWithChildren<{ title: string; back?: string; info?: string; infoDialog?: ReactElement }>) {\n    document.title = title;\n    return (\n        <>\n            <Toolbar sx={{ backgroundColor: colors.gray }}>\n                {back ? (\n                    <IconButton size=\"large\" edge=\"start\" href={back}>\n                        <ArrowBackIosIcon />\n                    </IconButton>\n                ) : null}\n                <h1 style={{ marginLeft: 20 }}>{title}</h1>\n                <Box flexGrow={1}></Box>\n                {info ? (\n                    <Tooltip enterDelay={100} title={info}>\n                        <IconButton size=\"large\" edge=\"end\">\n                            <InfoIcon />\n                        </IconButton>\n                    </Tooltip>\n                ) : null}\n                {infoDialog ? <InfoDialog>{infoDialog}</InfoDialog> : null}\n            </Toolbar>\n            <Divider sx={{ marginBottom: 8 }} />\n            {children}\n            <GrimwildFooter />\n        </>\n    );\n}\n\nfunction InfoDialog({ children }: PropsWithChildren<{}>) {\n    const [open, setOpen] = useState(false);\n    const toggleOpen = () => setOpen((o) => !o);\n    return (\n        <>\n            <Dialog\n                open={open}\n                onClose={(e) => {\n                    toggleOpen();\n                }}\n            >\n                <DialogContent>{children}</DialogContent>\n            </Dialog>\n            <IconButton size=\"large\" edge=\"end\" onClick={toggleOpen}>\n                <InfoIcon />\n            </IconButton>\n        </>\n    );\n}\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableRow, Theme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nexport type SelectedCell = {\n    row: number;\n    column: number;\n};\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {},\n    table: {},\n}));\nexport default function D66({ table, selected }: { table: string[][]; selected: string[] }) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={(props) => <Paper className={classes.root} {...props}></Paper>}>\n            {/* <Table padding={{xs: \"none\", sm: \"normal\"}}> */}\n            <Table size=\"small\">\n                <TableBody>\n                    {table.map((row, r) => (\n                        <TableRow\n                            key={r}\n                            sx={{\n                                // backgroundColor: \"yellow\",\n                                // fontSize: \"100pt\",\n                                // borderBottom: \"2px solid black\",\n                                \"& td\": {\n                                    fontSize: {xs: \"0.8rem\", sm: \"1rem\"}\n                                },\n                            }}\n                        >\n                            {row.map((cell, c) => (\n                                <TableCell\n                                    className={classes.table}\n                                    key={cell + c}\n                                    sx={\n                                        selected && selected.includes(cell)\n                                            ? {\n                                                  backgroundColor: (theme) =>\n                                                      theme.palette.primary.main,\n                                                  color: (theme) =>\n                                                      theme.palette.background.default,\n                                              }\n                                            : undefined\n                                    }\n                                >\n                                    {cell}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n    Tooltip,\n    Typography,\n} from \"@mui/material\";\nimport D66 from \"./D66\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport SwapHorizIcon from \"@mui/icons-material/SwapHoriz\";\nimport SwapCallsIcon from \"@mui/icons-material/SwapCalls\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport { colors } from \"../../theme\";\n\nexport function d(sides: number): number {\n    return Math.floor(Math.random() * sides);\n}\n\nexport function d6(): number {\n    return d(6);\n}\n\nexport type AddlOption = { name: string; color?: keyof typeof colors };\n\nfunction CrucibleResults({\n    options,\n    n = 2,\n    additionalOptions,\n    disableBackwards = false,\n}: {\n    options: string[][];\n    n?: number;\n    additionalOptions?: AddlOption[];\n    disableBackwards?: boolean;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const defaultSelection = () => {\n        if (options.length == 0 || options[0].length == 0) {\n            return [[] as string[], false] as const;\n        }\n        let shuffledOptions = options.map((row, index) => ({\n            row,\n            index,\n        }));\n        if (!disableBackwards) {\n            shuffledOptions = _.shuffle(shuffledOptions);\n        }\n        const selectedRows = shuffledOptions.slice(0, n);\n        let of = selectedRows[0].index > selectedRows[selectedRows.length - 1].index;\n        const firstRowLast = selectedRows[selectedRows.length - 1].index == 0;\n        const selected = selectedRows.map((row) => row.row[d(row.row.length)]);\n        if (of && firstRowLast && !selected[selected.length - 1].endsWith(\"ing\")) {\n            of = false;\n            selected.reverse();\n        }\n        return [selected, of] as const;\n    };\n    const [s, o] = defaultSelection();\n    const [selected, setSelected] = useState<string[]>(s);\n    const [of, setOf] = useState(o);\n    const randomAdditionalOption = () => (additionalOptions ? d(additionalOptions.length - 1) : 0);\n    const [selectedAdditionalOption, setSelectedAdditionalOption] = useState<OptionIndex>(\n        randomAdditionalOption()\n    );\n    const c = additionalOptions && additionalOptions[Number(selectedAdditionalOption)].color;\n    const selectedColor = c && colors[c];\n    const rerollAll = () => {\n        const [s, o] = defaultSelection();\n        setSelected(s);\n        setOf(o);\n        setSelectedAdditionalOption(randomAdditionalOption());\n    };\n    useEffect(rerollAll, [options]);\n\n    if (options.length == 0 || !options.some((row) => row.length > 0)) {\n        return null;\n    }\n    let selectedForDisplay = selected;\n    if (of) {\n        selectedForDisplay = [...selected];\n        selectedForDisplay.splice(selected.length - 1, 0, \"of\");\n    }\n\n    const onOptionClick = (\n        option: string,\n        optionSelectedIndex: number,\n        optionIsSelected: boolean,\n        row: string[],\n        rowIndex: number\n    ) => {\n        const newSelected = [...selected];\n        if (optionIsSelected) {\n            // console.debug(\"already selected, removing\");\n            newSelected.splice(optionSelectedIndex, 1);\n        } else if (options.length == n) {\n            // console.debug(`max options selected, setting option for ${rowIndex}`);\n            newSelected[rowIndex] = option;\n        } else {\n            let otherSelectedInRowIndex = selected.findIndex((s) => row.includes(s));\n            if (newSelected.length >= n) {\n                let indexToReplace = 0;\n                if (otherSelectedInRowIndex == -1) {\n                    let closestRowIndex = 0;\n                    for (const [rowIndexForSelected, selectedIndex] of selected.map(\n                        (s, index) => [options.findIndex((row) => row.includes(s)), index] as const\n                    )) {\n                        if (\n                            Math.abs(rowIndexForSelected - rowIndex) <=\n                            Math.abs(closestRowIndex - rowIndex)\n                        ) {\n                            closestRowIndex = rowIndexForSelected;\n                            indexToReplace = selectedIndex;\n                        }\n                    }\n                } else {\n                    // console.debug(\"selected more than max options, replacing other in row\");\n                    indexToReplace = otherSelectedInRowIndex;\n                }\n                newSelected.splice(indexToReplace, 1, option);\n            } else {\n                if (otherSelectedInRowIndex !== -1) {\n                    // console.debug(\"selected less than max + option in row already selected\");\n                    newSelected.splice(otherSelectedInRowIndex, 1, option);\n                } else {\n                    // console.debug(\"selected less than max options, inserting at start\");\n                    newSelected.splice(rowIndex, 0, option);\n                }\n            }\n        }\n        setSelected(newSelected);\n    };\n    return (\n        <Card\n            sx={{\n                border: `2px solid ${selectedColor}`,\n                display: \"flex\",\n                maxWidth: \"600px\",\n                textAlign: \"center\",\n            }}\n        >\n            <CardContent sx={{ marginTop: \"10px\" }}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" rowSpacing=\"5px\">\n                        {options.map((row, rowIndex) =>\n                            row.map((option) => {\n                                const optionSelectedIndex = selected.indexOf(option);\n                                const optionIsSelected = optionSelectedIndex != -1;\n                                return (\n                                    <Grid key={option} item xs={12 / row.length}>\n                                        <Button\n                                            variant={optionIsSelected ? \"contained\" : \"outlined\"}\n                                            onClick={() => {\n                                                onOptionClick(\n                                                    option,\n                                                    optionSelectedIndex,\n                                                    optionIsSelected,\n                                                    row,\n                                                    rowIndex\n                                                );\n                                            }}\n                                        >\n                                            {option}\n                                        </Button>\n                                    </Grid>\n                                );\n                            })\n                        )}\n                        <Grid item xs={12} margin=\"10px\">\n                            <Typography\n                                variant=\"h3\"\n                                align=\"center\"\n                                sx={{ minHeight: { xs: \"120px\", sm: \"60px\" } }}\n                            >\n                                {selectedForDisplay.join(\" \")}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing=\"5px\" justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapHorizIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                    }}\n                                >\n                                    Swap\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={of ? <RemoveIcon /> : <AddIcon />}\n                                    onClick={() => {\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Of\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapCallsIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Swap and Toggle Of\n                                </Button>\n                            </Grid>\n                        </Grid>\n                        {additionalOptions != null && selectedAdditionalOption != null && (\n                            <Grid item xs={12}>\n                                <AdditionalOptions\n                                    options={additionalOptions}\n                                    selected={selectedAdditionalOption}\n                                    setSelected={setSelectedAdditionalOption}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                </div>\n            </CardContent>\n            <CardActions>\n                <Tooltip title=\"Select new options without rerolling on the tables\">\n                    <IconButton\n                        onClick={() => {\n                            rollDiceAnimation(rollButtonRef);\n                            rerollAll();\n                        }}\n                        sx={{ marginLeft: \"auto\" }}\n                    >\n                        <CasinoIcon ref={rollButtonRef} />\n                    </IconButton>\n                </Tooltip>\n            </CardActions>\n        </Card>\n    );\n}\n\ntype OptionIndex = string | number;\nfunction AdditionalOptions({\n    options,\n    selected,\n    setSelected,\n}: {\n    options: AddlOption[];\n    selected: OptionIndex;\n    setSelected: Dispatch<SetStateAction<OptionIndex>>;\n}) {\n    const selectedString = selected.toString();\n    const selectedNumber = Number(selected);\n    const selectedColor = options[selectedNumber].color;\n    return (\n        <Select\n            value={selectedString}\n            // label=\"School of Magic\"\n            onChange={(e: SelectChangeEvent) => setSelected(e.target.value)}\n            autoWidth\n            sx={{\n                minWidth: \"200px\",\n                marginTop: \"20px\",\n                fontSize: \"14pt\",\n                border: `2px solid ${selectedColor && colors[selectedColor]}`,\n            }}\n        >\n            {options.map((option, index) => (\n                <MenuItem key={option.name} value={index}>\n                    {option.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nfunction rollDiceAnimation(rollButtonRef: React.RefObject<SVGSVGElement>) {\n    const rollButton = rollButtonRef.current;\n    if (rollButton) {\n        rollButton.classList.add(\"roll-dice\");\n        setTimeout(() => {\n            rollButton.classList.remove(\"roll-dice\");\n        }, 400);\n    }\n}\n\nexport default function Crucible({\n    tables,\n    titles,\n    additionalOptions,\n    disableBackwards = false,\n}: {\n    tables: string[][][];\n    titles?: string[];\n    additionalOptions?: AddlOption[];\n    disableBackwards?: boolean;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const [selectedInTables, setSelectedInTables] = useState<string[][]>(\n        Array(tables.length).fill([])\n    );\n    const [manualInput, setManualInput] = useState(false);\n    const [manualRolls, setManualRolls] = useState(\"\");\n\n    const getSelected = (table: string[][], row: number, column: number) => {\n        const selected = [];\n        const rc = table[row][column];\n        const cr = table[column][row];\n        selected.push(rc);\n        if (rc != cr) {\n            selected.push(cr);\n        }\n        return selected;\n    };\n    const roll = (_e: React.MouseEvent) => {\n        rollDiceAnimation(rollButtonRef);\n        const newSelectedInTables = [];\n        for (const i in tables) {\n            newSelectedInTables.push(getSelected(tables[i], d6(), d6()));\n        }\n        setSelectedInTables(newSelectedInTables);\n    };\n\n    const updateRolls = _.debounce(() => {\n        if (manualInput && manualRolls.length > 0) {\n            const rollChunks = _.chunk(manualRolls, 2);\n            const newSelectedInTables = [];\n            console.debug(\"updateRolls 1\", manualRolls);\n            for (const i in rollChunks) {\n                const rollChunk = rollChunks[i];\n                if (rollChunk.length == 2) {\n                    newSelectedInTables.push(\n                        getSelected(tables[i], Number(rollChunk[0]) - 1, Number(rollChunk[1]) - 1)\n                    );\n                }\n            }\n            console.debug(\"updateRolls\", rollChunks, newSelectedInTables);\n            setSelectedInTables(newSelectedInTables);\n        }\n    }, 200);\n    useEffect(updateRolls, [manualRolls]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", alignContent: \"center\" }}>\n                <Grid container spacing={2} justifyContent=\"center\">\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            {manualInput ? (\n                                <TextField\n                                    variant=\"filled\"\n                                    value={manualRolls}\n                                    onChange={(e) => {\n                                        const newValue = e.target.value;\n                                        console.debug(\"manual rolls\", manualRolls);\n                                        if (newValue.length <= 2 * tables.length) {\n                                            const newManualRolls = e.target.value.replaceAll(\n                                                /[^1-6]/g,\n                                                \"\"\n                                            );\n                                            console.debug(\"new manual rolls\", newManualRolls);\n                                            setManualRolls(newManualRolls);\n                                        }\n                                    }}\n                                    placeholder={`Type in your rolls, e.g. ${_.range(\n                                        1,\n                                        tables.length * 2 + 1\n                                    ).join(\"\")}`}\n                                    sx={{ minWidth: \"270px\" }}\n                                ></TextField>\n                            ) : (\n                                <Button\n                                    variant=\"contained\"\n                                    size=\"large\"\n                                    onClick={roll}\n                                    startIcon={<CasinoIcon ref={rollButtonRef} />}\n                                    sx={{\n                                        minHeight: \"50px\",\n                                        minWidth: \"100px\",\n                                        fontSize: \"20pt\",\n                                    }}\n                                >\n                                    Roll!\n                                </Button>\n                            )}\n                            <Tooltip\n                                // enterDelay={250}\n                                title={`Swap to ${manualInput ? \"random\" : \"manual input\"} mode`}\n                            >\n                                <IconButton\n                                    onClick={() => setManualInput((manualInput) => !manualInput)}\n                                    edge=\"start\"\n                                    sx={{\n                                        marginLeft: \"8px\",\n                                    }}\n                                >\n                                    {manualInput ? <CasinoIcon /> : <EditNoteIcon />}\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <CrucibleResults\n                                options={selectedInTables}\n                                additionalOptions={additionalOptions}\n                                disableBackwards={disableBackwards}\n                            />\n                        </div>\n                    </Grid>\n                    {tables.map((table, index) => {\n                        return (\n                            <Grid key={index} item>\n                                {/* xs={12} lg={tables.length % 2 ? 12 : 6} xl={tables.length % 3 ? 12 : 4}> */}\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        maxWidth: \"95vw\",\n                                        overflowX: \"scroll\",\n                                    }}\n                                >\n                                    <Card\n                                        sx={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                        }}\n                                    >\n                                        {titles && titles[index] != undefined ? (\n                                            <>\n                                                <CardHeader title={titles[index]} />\n                                                <br />\n                                            </>\n                                        ) : null}\n                                        <CardContent>\n                                            <D66 table={table} selected={selectedInTables[index]} />\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </>\n    );\n}\n","import spellForm from \"../../static/d66/spell_form.json\";\nimport spellMaterial from \"../../static/d66/spell_material.json\";\nimport spellStyle from \"../../static/d66/spell_style.json\";\nimport schools from \"../../static/d66/schools.json\";\nimport Crucible, { AddlOption } from \"./Crucible\";\nimport HeaderFooter from \"../HeaderFooter\";\n\nexport default function SpellCrucible() {\n    return (\n        <HeaderFooter title=\"Spell Crucible\" back=\"/dice\">\n            <Crucible\n                tables={[spellStyle, spellMaterial, spellForm]}\n                titles={[\"Style\", \"Material\", \"Form\"]}\n                additionalOptions={schools as AddlOption[]}\n            />\n        </HeaderFooter>\n    );\n}\n"],"names":["GrimwildFooter","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","component","display","flexDirection","backgroundColor","theme","palette","grey","Container","maxWidth","Typography","variant","align","Link","href","target","rel","OpenInNewIcon","fontSize","HeaderFooter","_ref","title","back","info","infoDialog","document","Toolbar","colors","gray","IconButton","size","edge","ArrowBackIosIcon","style","marginLeft","flexGrow","Tooltip","enterDelay","InfoIcon","InfoDialog","Divider","marginBottom","_ref2","open","setOpen","useState","toggleOpen","o","Dialog","onClose","e","DialogContent","onClick","useStyles","makeStyles","root","table","D66","selected","classes","TableContainer","props","Paper","className","Table","TableBody","map","row","r","TableRow","xs","sm","cell","c","TableCell","includes","primary","main","color","background","default","undefined","d","sides","Math","floor","random","d6","CrucibleResults","options","n","additionalOptions","disableBackwards","rollButtonRef","useRef","defaultSelection","length","shuffledOptions","index","_","selectedRows","slice","of","firstRowLast","endsWith","reverse","s","setSelected","setOf","randomAdditionalOption","selectedAdditionalOption","setSelectedAdditionalOption","Number","selectedColor","rerollAll","useEffect","some","selectedForDisplay","splice","Card","border","concat","textAlign","CardContent","marginTop","alignItems","Grid","container","justifyContent","rowSpacing","rowIndex","option","optionSelectedIndex","indexOf","optionIsSelected","item","Button","onOptionClick","newSelected","otherSelectedInRowIndex","findIndex","indexToReplace","closestRowIndex","rowIndexForSelected","selectedIndex","abs","margin","join","spacing","startIcon","SwapHorizIcon","toReversed","RemoveIcon","AddIcon","SwapCallsIcon","AdditionalOptions","CardActions","rollDiceAnimation","CasinoIcon","ref","selectedString","toString","Select","value","onChange","autoWidth","minWidth","MenuItem","name","rollButton","current","classList","add","setTimeout","remove","Crucible","_ref3","tables","titles","selectedInTables","setSelectedInTables","Array","fill","manualInput","setManualInput","manualRolls","setManualRolls","getSelected","column","rc","cr","push","updateRolls","rollChunks","newSelectedInTables","console","debug","i","rollChunk","alignContent","TextField","newValue","newManualRolls","replaceAll","placeholder","_e","EditNoteIcon","overflowX","CardHeader","SpellCrucible","spellStyle","spellMaterial","spellForm","schools"],"sourceRoot":""}