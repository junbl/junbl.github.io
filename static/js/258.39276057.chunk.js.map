{"version":3,"file":"static/js/258.39276057.chunk.js","mappings":"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","sources":["dice/GrimwildFooter.tsx","dice/HeaderFooter.tsx","dice/crucible/D66.tsx","dice/crucible/Crucible.tsx","dice/crucible/Spell.tsx"],"sourcesContent":["import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import GrimwildFooter from \"./GrimwildFooter\";\nimport { Box, Dialog, DialogContent, Divider, IconButton, Toolbar, Tooltip } from \"@mui/material\";\nimport { PropsWithChildren, ReactElement, useState } from \"react\";\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport { colors } from \"../theme\";\n\nexport default function HeaderFooter({\n    title,\n    children,\n    back,\n    info,\n    infoDialog,\n    grimwild = true,\n}: PropsWithChildren<{\n    title: string;\n    back?: string;\n    info?: string;\n    infoDialog?: ReactElement;\n    grimwild?: boolean;\n}>) {\n    document.title = title;\n    return (\n        <>\n            <Toolbar sx={{ backgroundColor: colors.gray }}>\n                {back ? (\n                    <IconButton size=\"large\" edge=\"start\" href={back}>\n                        <ArrowBackIosIcon />\n                    </IconButton>\n                ) : null}\n                <h1 style={{ marginLeft: 20 }}>{title}</h1>\n                <Box flexGrow={1}></Box>\n                {info ? (\n                    <Tooltip enterDelay={100} title={info}>\n                        <IconButton size=\"large\" edge=\"end\">\n                            <InfoIcon />\n                        </IconButton>\n                    </Tooltip>\n                ) : null}\n                {infoDialog ? <InfoDialog>{infoDialog}</InfoDialog> : null}\n            </Toolbar>\n            <Divider sx={{ marginBottom: 8 }} />\n            {children}\n            {grimwild ? <GrimwildFooter /> : null}\n        </>\n    );\n}\n\nfunction InfoDialog({ children }: PropsWithChildren<{}>) {\n    const [open, setOpen] = useState(false);\n    const toggleOpen = () => setOpen((o) => !o);\n    return (\n        <>\n            <Dialog\n                open={open}\n                onClose={(e) => {\n                    toggleOpen();\n                }}\n            >\n                <DialogContent>{children}</DialogContent>\n            </Dialog>\n            <IconButton size=\"large\" edge=\"end\" onClick={toggleOpen}>\n                <InfoIcon />\n            </IconButton>\n        </>\n    );\n}\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableRow, Theme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { colors } from \"../../theme\";\n\nexport type SelectedCell = {\n    row: number;\n    column: number;\n};\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {},\n    table: {},\n}));\nexport default function D66({\n    table,\n    selected,\n    color = undefined,\n    textColor = undefined,\n}: {\n    table: string[][];\n    selected: string[];\n    color?: string;\n    textColor?: string;\n}) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={(props) => <Paper className={classes.root} {...props}></Paper>}>\n            {/* <Table padding={{xs: \"none\", sm: \"normal\"}}> */}\n            <Table size=\"small\">\n                <TableBody>\n                    {table.map((row, r) => (\n                        <TableRow\n                            key={r}\n                            sx={{\n                                // backgroundColor: \"yellow\",\n                                // fontSize: \"100pt\",\n                                // borderBottom: \"2px solid black\",\n                                \"& td\": {\n                                    fontSize: { xs: \"0.8rem\", sm: \"1rem\" },\n                                },\n                            }}\n                        >\n                            {row.map((cell, c) => (\n                                <TableCell\n                                    className={classes.table}\n                                    key={cell + c}\n                                    sx={\n                                        selected && selected.includes(cell)\n                                            ? {\n                                                  backgroundColor:\n                                                      color ||\n                                                      ((theme) => theme.palette.primary.main),\n                                                  color:\n                                                      textColor ||\n                                                      ((theme) => theme.palette.background.default),\n                                              }\n                                            : undefined\n                                    }\n                                >\n                                    {cell}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    TextField,\n    Tooltip,\n    Typography,\n} from \"@mui/material\";\nimport D66 from \"./D66\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport SwapHorizIcon from \"@mui/icons-material/SwapHoriz\";\nimport SwapCallsIcon from \"@mui/icons-material/SwapCalls\";\nimport EditNoteIcon from \"@mui/icons-material/EditNote\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport { colors } from \"../../theme\";\n\nexport function d(sides: number): number {\n    return Math.floor(Math.random() * sides);\n}\n\nexport function d6(): number {\n    return d(6);\n}\n\nexport type AddlOption = { name: string; color?: keyof typeof colors };\n\nfunction CrucibleResults({\n    options,\n    n = 2,\n    additionalOptions,\n    separator = \" \",\n    buttons = true,\n    disableBackwards = false,\n    defaultOf = false,\n    defaultThe = false,\n    enableThe = defaultThe,\n    enableOf = true,\n    enableSwap = true,\n    color = undefined,\n    textColor = undefined,\n}: {\n    options: string[][];\n    n?: number;\n    additionalOptions?: AddlOption[];\n    separator?: string;\n    buttons?: boolean;\n    defaultOf?: boolean;\n    enableOf?: boolean;\n    defaultThe?: boolean;\n    enableThe?: boolean;\n    enableSwap?: boolean;\n    disableBackwards?: boolean;\n    color?: string;\n    textColor?: string;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const defaultSelection = () => {\n        if (options.length == 0 || options[0].length == 0) {\n            return [[] as string[], false] as const;\n        }\n        let shuffledOptions = options.map((row, index) => ({\n            row,\n            index,\n        }));\n        if (!disableBackwards) {\n            shuffledOptions = _.shuffle(shuffledOptions);\n        }\n        const selectedRows = shuffledOptions.slice(0, n);\n        let of = selectedRows[0].index > selectedRows[selectedRows.length - 1].index;\n        const firstRowLast = selectedRows[selectedRows.length - 1].index == 0;\n        const selected = selectedRows.map((row) => row.row[d(row.row.length)]);\n        if (!defaultOf && of && firstRowLast && !selected[selected.length - 1].endsWith(\"ing\")) {\n            of = false;\n            selected.reverse();\n        }\n        of = defaultOf || of;\n        return [selected, of, defaultThe || (enableThe && of)] as const;\n    };\n    const [s, o, t] = defaultSelection();\n    const [selected, setSelected] = useState<string[]>(s);\n    const [of, setOf] = useState(o);\n    const [the, setThe] = useState(t);\n    const randomAdditionalOption = () => (additionalOptions ? d(additionalOptions.length - 1) : 0);\n    const [selectedAdditionalOption, setSelectedAdditionalOption] = useState<OptionIndex>(\n        randomAdditionalOption()\n    );\n    const c = additionalOptions && additionalOptions[Number(selectedAdditionalOption)].color;\n    const selectedColor = c && colors[c];\n    const rerollAll = () => {\n        const [s, o, t] = defaultSelection();\n        setSelected(s);\n        setOf(o);\n        setThe(t);\n        setSelectedAdditionalOption(randomAdditionalOption());\n    };\n    useEffect(rerollAll, [options]);\n\n    if (options.length == 0 || !options.some((row) => row.length > 0)) {\n        return null;\n    }\n    let selectedForDisplay = selected;\n    if (the) {\n        selectedForDisplay = [...selectedForDisplay];\n        selectedForDisplay.splice(1, 0, \"the\");\n    }\n    if (of) {\n        selectedForDisplay = [...selectedForDisplay];\n        selectedForDisplay.splice(1, 0, \"of\");\n    }\n\n    const onOptionClick = (\n        option: string,\n        optionSelectedIndex: number,\n        optionIsSelected: boolean,\n        row: string[],\n        rowIndex: number\n    ) => {\n        const newSelected = [...selected];\n        if (optionIsSelected) {\n            // console.debug(\"already selected, removing\");\n            newSelected.splice(optionSelectedIndex, 1);\n        } else if (options.length == n) {\n            // console.debug(`max options selected, setting option for ${rowIndex}`);\n            newSelected[rowIndex] = option;\n        } else {\n            let otherSelectedInRowIndex = selected.findIndex((s) => row.includes(s));\n            if (newSelected.length >= n) {\n                let indexToReplace = 0;\n                if (otherSelectedInRowIndex == -1) {\n                    let closestRowIndex = 0;\n                    for (const [rowIndexForSelected, selectedIndex] of selected.map(\n                        (s, index) => [options.findIndex((row) => row.includes(s)), index] as const\n                    )) {\n                        if (\n                            Math.abs(rowIndexForSelected - rowIndex) <=\n                            Math.abs(closestRowIndex - rowIndex)\n                        ) {\n                            closestRowIndex = rowIndexForSelected;\n                            indexToReplace = selectedIndex;\n                        }\n                    }\n                } else {\n                    // console.debug(\"selected more than max options, replacing other in row\");\n                    indexToReplace = otherSelectedInRowIndex;\n                }\n                newSelected.splice(indexToReplace, 1, option);\n            } else {\n                if (otherSelectedInRowIndex !== -1) {\n                    // console.debug(\"selected less than max + option in row already selected\");\n                    newSelected.splice(otherSelectedInRowIndex, 1, option);\n                } else {\n                    // console.debug(\"selected less than max options, inserting at start\");\n                    newSelected.splice(rowIndex, 0, option);\n                }\n            }\n        }\n        setSelected(newSelected);\n    };\n    return (\n        <Card\n            sx={{\n                border: `2px solid ${selectedColor}`,\n                display: \"flex\",\n                maxWidth: \"600px\",\n                textAlign: \"center\",\n            }}\n        >\n            <CardContent sx={{ marginTop: \"10px\" }}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Grid container justifyContent=\"center\" alignItems=\"center\" rowSpacing=\"5px\">\n                        {options.map((row, rowIndex) =>\n                            row.map((option) => {\n                                const optionSelectedIndex = selected.indexOf(option);\n                                const optionIsSelected = optionSelectedIndex != -1;\n                                return (\n                                    <Grid key={option} item xs={12 / row.length}>\n                                        <Button\n                                            variant={optionIsSelected ? \"contained\" : \"outlined\"}\n                                            onClick={() => {\n                                                onOptionClick(\n                                                    option,\n                                                    optionSelectedIndex,\n                                                    optionIsSelected,\n                                                    row,\n                                                    rowIndex\n                                                );\n                                            }}\n                                        >\n                                            {option}\n                                        </Button>\n                                    </Grid>\n                                );\n                            })\n                        )}\n                        <Grid item xs={12} margin=\"10px\">\n                            <Typography\n                                variant=\"h3\"\n                                align=\"center\"\n                                sx={{ minHeight: { xs: \"120px\", sm: \"60px\" } }}\n                            >\n                                {selectedForDisplay.map((s, i) => (\n                                    <>\n                                        {i > 0 ? <b>{separator}</b> : null}\n                                        {s}\n                                    </>\n                                ))}\n                            </Typography>\n                        </Grid>\n                        {buttons ? (\n                            <Grid container item xs={12} spacing=\"5px\" justifyContent=\"center\">\n                                {enableSwap ? (\n                                    <Grid item>\n                                        <Button\n                                            variant=\"contained\"\n                                            startIcon={<SwapHorizIcon />}\n                                            onClick={() => {\n                                                setSelected(selected.toReversed());\n                                            }}\n                                        >\n                                            Swap\n                                        </Button>\n                                    </Grid>\n                                ) : null}\n                                {enableOf ? (\n                                    <Grid item>\n                                        <Button\n                                            variant=\"contained\"\n                                            startIcon={of ? <RemoveIcon /> : <AddIcon />}\n                                            onClick={() => {\n                                                setOf((of) => !of);\n                                            }}\n                                        >\n                                            Of\n                                        </Button>\n                                    </Grid>\n                                ) : null}\n                                {enableThe ? (\n                                    <Grid item>\n                                        <Button\n                                            variant=\"contained\"\n                                            startIcon={the ? <RemoveIcon /> : <AddIcon />}\n                                            onClick={() => {\n                                                setThe((the) => !the);\n                                            }}\n                                        >\n                                            the\n                                        </Button>\n                                    </Grid>\n                                ) : null}\n                                {enableOf && enableSwap ? (\n                                    <Grid item>\n                                        <Button\n                                            variant=\"contained\"\n                                            startIcon={<SwapCallsIcon />}\n                                            onClick={() => {\n                                                setSelected(selected.toReversed());\n                                                setOf((of) => !of);\n                                            }}\n                                        >\n                                            Swap and Toggle Of\n                                        </Button>\n                                    </Grid>\n                                ) : null}\n                            </Grid>\n                        ) : null}\n                        {additionalOptions != null && selectedAdditionalOption != null && (\n                            <Grid item xs={12}>\n                                <AdditionalOptions\n                                    options={additionalOptions}\n                                    selected={selectedAdditionalOption}\n                                    setSelected={setSelectedAdditionalOption}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                </div>\n            </CardContent>\n            <CardActions>\n                <Tooltip title=\"Select new options without rerolling on the tables\">\n                    <IconButton\n                        onClick={() => {\n                            rollDiceAnimation(rollButtonRef);\n                            rerollAll();\n                        }}\n                        sx={{ marginLeft: \"auto\" }}\n                    >\n                        <CasinoIcon ref={rollButtonRef} />\n                    </IconButton>\n                </Tooltip>\n            </CardActions>\n        </Card>\n    );\n}\n\ntype OptionIndex = string | number;\nfunction AdditionalOptions({\n    options,\n    selected,\n    setSelected,\n}: {\n    options: AddlOption[];\n    selected: OptionIndex;\n    setSelected: Dispatch<SetStateAction<OptionIndex>>;\n}) {\n    const selectedString = selected.toString();\n    const selectedNumber = Number(selected);\n    const selectedColor = options[selectedNumber].color;\n    return (\n        <Select\n            value={selectedString}\n            // label=\"School of Magic\"\n            onChange={(e: SelectChangeEvent) => setSelected(e.target.value)}\n            autoWidth\n            sx={{\n                minWidth: \"200px\",\n                marginTop: \"20px\",\n                fontSize: \"14pt\",\n                border: `2px solid ${selectedColor && colors[selectedColor]}`,\n            }}\n        >\n            {options.map((option, index) => (\n                <MenuItem key={option.name} value={index}>\n                    {option.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nfunction rollDiceAnimation(rollButtonRef: React.RefObject<SVGSVGElement>) {\n    const rollButton = rollButtonRef.current;\n    if (rollButton) {\n        rollButton.classList.add(\"roll-dice\");\n        setTimeout(() => {\n            rollButton.classList.remove(\"roll-dice\");\n        }, 400);\n    }\n}\n\nexport default function Crucible({\n    tables,\n    titles,\n    n = 2,\n    additionalOptions,\n    color = undefined,\n    textColor = undefined,\n    separator = \" \",\n    defaultOf = false,\n    defaultThe = false,\n    enableThe = defaultThe,\n    enableOf = true,\n    buttons = true,\n    enableSwap = true,\n    disableBackwards = false,\n}: {\n    tables: string[][][];\n    titles?: string[];\n    n?: number;\n    additionalOptions?: AddlOption[];\n    color?: string;\n    textColor?: string;\n    separator?: string;\n    buttons?: boolean;\n    defaultOf?: boolean;\n    defaultThe?: boolean;\n    enableThe?: boolean;\n    enableOf?: boolean;\n    enableSwap?: boolean;\n    disableBackwards?: boolean;\n}) {\n    const rollButtonRef = useRef<SVGSVGElement>(null);\n    const [selectedInTables, setSelectedInTables] = useState<string[][]>(\n        Array(tables.length).fill([])\n    );\n    const [manualInput, setManualInput] = useState(false);\n    const [manualRolls, setManualRolls] = useState(\"\");\n\n    const getSelected = (table: string[][], row: number, column: number) => {\n        const selected = [];\n        const rc = table[row][column];\n        const cr = table[column][row];\n        selected.push(rc);\n        if (rc != cr) {\n            selected.push(cr);\n        }\n        return selected;\n    };\n    const roll = (_e: React.MouseEvent) => {\n        rollDiceAnimation(rollButtonRef);\n        const newSelectedInTables = [];\n        for (const i in tables) {\n            newSelectedInTables.push(getSelected(tables[i], d6(), d6()));\n        }\n        setSelectedInTables(newSelectedInTables);\n    };\n\n    const updateRolls = _.debounce(() => {\n        if (manualInput && manualRolls.length > 0) {\n            const rollChunks = _.chunk(manualRolls, 2);\n            const newSelectedInTables = [];\n            for (const i in rollChunks) {\n                const rollChunk = rollChunks[i];\n                if (rollChunk.length == 2) {\n                    newSelectedInTables.push(\n                        getSelected(tables[i], Number(rollChunk[0]) - 1, Number(rollChunk[1]) - 1)\n                    );\n                }\n            }\n            setSelectedInTables(newSelectedInTables);\n        }\n    }, 200);\n    useEffect(updateRolls, [manualRolls]);\n\n    return (\n        <>\n            <div style={{ display: \"flex\", alignContent: \"center\" }}>\n                <Grid container spacing={2} justifyContent=\"center\">\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            {manualInput ? (\n                                <TextField\n                                    variant=\"filled\"\n                                    value={manualRolls}\n                                    onChange={(e) => {\n                                        const newValue = e.target.value;\n                                        if (newValue.length <= 2 * tables.length) {\n                                            const newManualRolls = e.target.value.replaceAll(\n                                                /[^1-6]/g,\n                                                \"\"\n                                            );\n                                            setManualRolls(newManualRolls);\n                                        }\n                                    }}\n                                    placeholder={`Type in your rolls, e.g. ${_.range(\n                                        1,\n                                        tables.length * 2 + 1\n                                    ).join(\"\")}`}\n                                    sx={{ minWidth: \"270px\" }}\n                                ></TextField>\n                            ) : (\n                                <Button\n                                    variant=\"contained\"\n                                    size=\"large\"\n                                    onClick={roll}\n                                    startIcon={<CasinoIcon ref={rollButtonRef} />}\n                                    sx={{\n                                        minHeight: \"50px\",\n                                        minWidth: \"100px\",\n                                        fontSize: \"20pt\",\n                                    }}\n                                >\n                                    Roll!\n                                </Button>\n                            )}\n                            <Tooltip\n                                // enterDelay={250}\n                                title={`Swap to ${manualInput ? \"random\" : \"manual input\"} mode`}\n                            >\n                                <IconButton\n                                    onClick={() => setManualInput((manualInput) => !manualInput)}\n                                    edge=\"start\"\n                                    sx={{\n                                        marginLeft: \"8px\",\n                                    }}\n                                >\n                                    {manualInput ? <CasinoIcon /> : <EditNoteIcon />}\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <CrucibleResults\n                                options={selectedInTables}\n                                n={n}\n                                additionalOptions={additionalOptions}\n                                disableBackwards={disableBackwards}\n                                separator={separator}\n                                enableOf={enableOf}\n                                defaultOf={defaultOf}\n                                enableThe={enableThe}\n                                defaultThe={defaultThe}\n                                enableSwap={enableSwap}\n                                buttons={buttons}\n                                color={color}\n                                textColor={textColor}\n                            />\n                        </div>\n                    </Grid>\n                    {tables.map((table, index) => {\n                        return (\n                            <Grid key={index} item>\n                                {/* xs={12} lg={tables.length % 2 ? 12 : 6} xl={tables.length % 3 ? 12 : 4}> */}\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        maxWidth: \"95vw\",\n                                        overflowX: \"scroll\",\n                                    }}\n                                >\n                                    <Card\n                                        sx={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                        }}\n                                    >\n                                        {titles && titles[index] != undefined ? (\n                                            <>\n                                                <CardHeader title={titles[index]} />\n                                                <br />\n                                            </>\n                                        ) : null}\n                                        <CardContent>\n                                            <D66\n                                                table={table}\n                                                selected={selectedInTables[index]}\n                                                color={color}\n                                                textColor={textColor}\n                                            />\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </>\n    );\n}\n","import spellForm from \"../../static/d66/spell_form.json\";\nimport spellMaterial from \"../../static/d66/spell_material.json\";\nimport spellStyle from \"../../static/d66/spell_style.json\";\nimport schools from \"../../static/d66/schools.json\";\nimport Crucible, { AddlOption } from \"./Crucible\";\nimport HeaderFooter from \"../HeaderFooter\";\n\nexport default function SpellCrucible() {\n    return (\n        <HeaderFooter title=\"Spell Crucible\" back=\"/dice\">\n            <Crucible\n                tables={[spellStyle, spellMaterial, spellForm]}\n                titles={[\"Style\", \"Material\", \"Form\"]}\n                additionalOptions={schools as AddlOption[]}\n            />\n        </HeaderFooter>\n    );\n}\n"],"names":["GrimwildFooter","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","component","display","flexDirection","backgroundColor","theme","palette","grey","Container","maxWidth","Typography","variant","align","Link","href","target","rel","OpenInNewIcon","fontSize","HeaderFooter","_ref","title","back","info","infoDialog","grimwild","document","Toolbar","colors","gray","IconButton","size","edge","ArrowBackIosIcon","style","marginLeft","flexGrow","Tooltip","enterDelay","InfoIcon","InfoDialog","Divider","marginBottom","_ref2","open","setOpen","useState","toggleOpen","o","Dialog","onClose","e","DialogContent","onClick","useStyles","makeStyles","root","table","D66","selected","color","textColor","classes","TableContainer","props","Paper","className","Table","TableBody","map","row","r","TableRow","xs","sm","cell","c","TableCell","includes","primary","main","background","default","undefined","d","sides","Math","floor","random","d6","CrucibleResults","options","n","additionalOptions","separator","buttons","disableBackwards","defaultOf","defaultThe","enableThe","enableOf","enableSwap","rollButtonRef","useRef","defaultSelection","length","shuffledOptions","index","_","selectedRows","slice","of","firstRowLast","endsWith","reverse","s","t","setSelected","setOf","the","setThe","randomAdditionalOption","selectedAdditionalOption","setSelectedAdditionalOption","Number","selectedColor","rerollAll","useEffect","some","selectedForDisplay","splice","Card","border","concat","textAlign","CardContent","marginTop","alignItems","Grid","container","justifyContent","rowSpacing","rowIndex","option","optionSelectedIndex","indexOf","optionIsSelected","item","Button","onOptionClick","newSelected","otherSelectedInRowIndex","findIndex","indexToReplace","closestRowIndex","rowIndexForSelected","selectedIndex","abs","margin","i","spacing","startIcon","SwapHorizIcon","toReversed","RemoveIcon","AddIcon","SwapCallsIcon","AdditionalOptions","CardActions","rollDiceAnimation","CasinoIcon","ref","selectedString","toString","Select","value","onChange","autoWidth","minWidth","MenuItem","name","rollButton","current","classList","add","setTimeout","remove","Crucible","_ref3","tables","titles","selectedInTables","setSelectedInTables","Array","fill","manualInput","setManualInput","manualRolls","setManualRolls","getSelected","column","rc","cr","push","updateRolls","rollChunks","newSelectedInTables","rollChunk","alignContent","TextField","newManualRolls","replaceAll","placeholder","join","_e","EditNoteIcon","overflowX","CardHeader","SpellCrucible","spellStyle","spellMaterial","spellForm","schools"],"sourceRoot":""}