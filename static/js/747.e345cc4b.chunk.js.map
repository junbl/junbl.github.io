{"version":3,"file":"static/js/747.e345cc4b.chunk.js","mappings":"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","sources":["dice/D66.tsx","dice/Crucible.tsx","dice/GrimwildFooter.tsx","dice/SpellCrucible.tsx"],"sourcesContent":["import { Paper, Table, TableBody, TableCell, TableContainer, TableRow, Theme } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nexport type SelectedCell = {\n    row: number;\n    column: number;\n};\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {},\n    table: {},\n}));\nexport default function D66({ table, selected }: { table: string[][]; selected: string[] }) {\n    const classes = useStyles();\n    return (\n        <TableContainer component={(props) => <Paper className={classes.root} {...props}></Paper>}>\n            <Table>\n                <TableBody>\n                    {table.map((row, r) => (\n                        <TableRow\n                            key={r}\n                            sx={{\n                                // backgroundColor: \"yellow\",\n                                // fontSize: \"100pt\",\n                                // borderBottom: \"2px solid black\",\n                                // \"& td\": {\n                                //     fontSize: \"1rem\",\n                                // },\n                            }}\n                        >\n                            {row.map((cell, c) => (\n                                <TableCell\n                                    className={classes.table}\n                                    key={cell + c}\n                                    sx={\n                                        selected.includes(cell)\n                                            ? {\n                                                  backgroundColor: (theme) =>\n                                                      theme.palette.primary.main,\n                                                  color: (theme) =>\n                                                      theme.palette.background.default,\n                                              }\n                                            : undefined\n                                    }\n                                >\n                                    {cell}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    IconButton,\n    MenuItem,\n    Select,\n    SelectChangeEvent,\n    Tooltip,\n    Typography,\n} from \"@mui/material\";\nimport D66 from \"./D66\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport SwapHorizIcon from \"@mui/icons-material/SwapHoriz\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport { colors } from \"../App\";\n\nexport function d(sides: number): number {\n    return Math.floor(Math.random() * sides);\n}\n\nexport function d6(): number {\n    return d(6);\n}\n\nexport type AddlOption = { name: string; color?: keyof typeof colors };\n\nfunction CrucibleResults({\n    options,\n    n = 2,\n    additionalOptions,\n}: {\n    options: string[][];\n    n?: number;\n    additionalOptions?: AddlOption[];\n}) {\n    const defaultSelection = () => {\n        if (options.length == 0 || options[0].length == 0) {\n            return [[] as string[], false] as const;\n        }\n        const shuffledOptions = _.shuffle(\n            options.map((row, index) => ({\n                row,\n                index,\n            }))\n        );\n        const selectedRows = shuffledOptions.slice(0, n);\n        let of = selectedRows[0].index > selectedRows[selectedRows.length - 1].index;\n        const firstRowLast = selectedRows[selectedRows.length - 1].index == 0;\n        const selected = selectedRows.map((row) => row.row[d(row.row.length)]);\n        if (of && firstRowLast && !selected[selected.length - 1].endsWith(\"ing\")) {\n            of = false;\n            selected.reverse();\n        }\n        return [selected, of] as const;\n    };\n    const [s, o] = defaultSelection();\n    const [selected, setSelected] = useState<string[]>(s);\n    const [of, setOf] = useState(o);\n    const randomAdditionalOption = () => (additionalOptions ? d(additionalOptions.length - 1) : 0);\n    const [selectedAdditionalOption, setSelectedAdditionalOption] = useState<OptionIndex>(\n        randomAdditionalOption()\n    );\n    const rerollAll = () => {\n        const [s, o] = defaultSelection();\n        setSelected(s);\n        setOf(o);\n        setSelectedAdditionalOption(randomAdditionalOption());\n    };\n    useEffect(rerollAll, [options]);\n\n    if (options.length == 0 || !options.some((row) => row.length > 0)) {\n        return null;\n    }\n    let selectedForDisplay = selected;\n    if (of) {\n        selectedForDisplay = [...selected];\n        selectedForDisplay.splice(1, 0, \"of\");\n    }\n    return (\n        <Card sx={{ display: \"flex\", maxWidth: \"600px\", textAlign: \"center\" }}>\n            <CardContent sx={{ marginTop: \"10px\" }}>\n                <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Grid container justifyContent=\"center\" alignItems=\"center\">\n                        {options.map((row, index) =>\n                            row.map((option) => {\n                                const optionIndex = selected.indexOf(option);\n                                return (\n                                    <Grid key={option} item xs={12 / row.length}>\n                                        <Button\n                                            variant={optionIndex != -1 ? \"contained\" : \"outlined\"}\n                                            onClick={() => {\n                                                const newSelected = [...selected];\n                                                if (optionIndex != -1) {\n                                                    newSelected.splice(optionIndex, 1);\n                                                } else if (options.length == n) {\n                                                    newSelected[index] = option;\n                                                } else {\n                                                    if (newSelected.length >= n) {\n                                                        let i = newSelected.findIndex((s) =>\n                                                            row.includes(s)\n                                                        );\n                                                        if (i == -1) {\n                                                            i = 0;\n                                                        }\n                                                        newSelected.splice(i, 1, option);\n                                                    } else {\n                                                        newSelected.push(option);\n                                                    }\n                                                }\n                                                setSelected(newSelected);\n                                            }}\n                                        >\n                                            {option}\n                                        </Button>\n                                    </Grid>\n                                );\n                            })\n                        )}\n                        <Grid item xs={12} margin=\"10px\">\n                            <Typography variant=\"h3\" align=\"center\">\n                                {selectedForDisplay.join(\" \")}\n                            </Typography>\n                        </Grid>\n                        <Grid container item xs={12} spacing=\"5px\" justifyContent=\"center\">\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapHorizIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                    }}\n                                >\n                                    Swap\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={of ? <RemoveIcon /> : <AddIcon />}\n                                    onClick={() => {\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Of\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    startIcon={<SwapHorizIcon />}\n                                    onClick={() => {\n                                        setSelected(selected.toReversed());\n                                        setOf((of) => !of);\n                                    }}\n                                >\n                                    Swap and Toggle Of\n                                </Button>\n                            </Grid>\n                        </Grid>\n                        {additionalOptions != null && selectedAdditionalOption != null && (\n                            <Grid item xs={12}>\n                                <AdditionalOptions\n                                    options={additionalOptions}\n                                    selected={selectedAdditionalOption}\n                                    setSelected={setSelectedAdditionalOption}\n                                />\n                            </Grid>\n                        )}\n                    </Grid>\n                </div>\n            </CardContent>\n            <CardActions>\n                <Tooltip title=\"Select new options without rerolling on the tables\">\n                    <IconButton onClick={rerollAll} sx={{ marginLeft: \"auto\" }}>\n                        <CasinoIcon />\n                    </IconButton>\n                </Tooltip>\n            </CardActions>\n        </Card>\n    );\n}\n\nfunction isString(data: unknown): data is string {\n    return typeof data === \"string\";\n}\n\ntype OptionIndex = string | number;\nfunction AdditionalOptions({\n    options,\n    selected,\n    setSelected,\n}: {\n    options: AddlOption[];\n    selected: OptionIndex;\n    setSelected: Dispatch<SetStateAction<OptionIndex>>;\n}) {\n    const selectedString = selected.toString();\n    const selectedNumber = Number(selected);\n    const selectedColor = options[selectedNumber].color;\n    const textColor = selectedColor != \"black\" ? colors[\"black\"] : undefined;\n    return (\n        <Select\n            value={selectedString}\n            // label=\"School of Magic\"\n            onChange={(e: SelectChangeEvent) => setSelected(e.target.value)}\n            autoWidth\n            sx={{\n                marginTop: \"20px\",\n                // minWidth: \"100%\",\n                fontSize: \"14pt\",\n                backgroundColor: selectedColor && colors[selectedColor],\n                color: textColor,\n            }}\n        >\n            {options.map((option, index) => (\n                <MenuItem key={option.name} value={index}>\n                    {option.name}\n                </MenuItem>\n            ))}\n        </Select>\n    );\n}\n\nexport default function Crucible({\n    tables,\n    titles,\n    additionalOptions,\n}: {\n    tables: string[][][];\n    titles?: string[];\n    additionalOptions?: AddlOption[];\n}) {\n    const [selectedInTables, setSelectedInTables] = useState<string[][]>(\n        Array(tables.length).fill([])\n    );\n    const roll = (_e: React.MouseEvent) => {\n        const newSelectedInTables = [];\n        for (const i in tables) {\n            const selected = [];\n            const row = d6();\n            const column = d6();\n            const rc = tables[i][row][column];\n            const cr = tables[i][column][row];\n            selected.push(rc);\n            if (rc != cr) {\n                selected.push(cr);\n            }\n            newSelectedInTables.push(selected);\n        }\n        setSelectedInTables(newSelectedInTables);\n    };\n\n    return (\n        <>\n            <div style={{ display: \"flex\", alignContent: \"center\" }}>\n                <Grid container spacing={2} justifyContent=\"center\">\n                    <Grid\n                        item\n                        xs={12}\n                    >\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\"\n                                onClick={roll}\n                                startIcon={<CasinoIcon />}\n                                sx={{\n                                    minHeight: \"50px\",\n                                    minWidth: \"100px\",\n                                    fontSize: \"20pt\",\n                                }}\n                            >\n                                Roll!\n                            </Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <CrucibleResults\n                                options={selectedInTables}\n                                additionalOptions={additionalOptions}\n                            />\n                        </div>\n                    </Grid>\n                    {tables.map((table, index) => {\n                        return (\n                            <Grid key={index} item >\n                                {/* xs={12} lg={tables.length % 2 ? 12 : 6} xl={tables.length % 3 ? 12 : 4}> */}\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        // maxWidth: \"1000px\",\n                                    }}\n                                >\n                                    <Card\n                                        sx={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                        }}\n                                    >\n                                        {titles && titles[index] != undefined ? (\n                                            <>\n                                                <CardHeader title={titles[index]} />\n                                                <br />\n                                            </>\n                                        ) : null}\n                                        <CardContent>\n                                            <D66 table={table} selected={selectedInTables[index]} />\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </div>\n        </>\n    );\n}\n","import { Box, Container, Link, Typography } from \"@mui/material\";\nimport OpenInNewIcon from \"@mui/icons-material/OpenInNew\";\n\nexport default function GrimwildFooter() {\n    return (\n        <>\n            <Box sx={{ minHeight: \"30px\" }}></Box>\n            <Box\n                component=\"footer\"\n                sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    minHeight: \"100px\",\n                    backgroundColor: (theme) => theme.palette.grey[800],\n                }}\n            >\n                <Container maxWidth=\"md\">\n                    <Typography variant=\"body2\" align=\"center\">\n                        <br />\n                        This page contains content from <b>Grimwild</b> by J.D. Maxwell, licensed\n                        under{\" \"}\n                        <Link\n                            href=\"https://creativecommons.org/licenses/by/4.0/legalcode.en\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            CC-BY&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>\n                        .\n                        <br />\n                        Check out{\" \"}\n                        <Link\n                            href=\"https://www.backerkit.com/c/projects/OddityPress/grimwild\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Grimwild&nbsp;on&nbsp;BackerKit&nbsp;\n                            <OpenInNewIcon fontSize=\"inherit\" />\n                        </Link>{\" \"}\n                        for more information!\n                    </Typography>\n                </Container>\n            </Box>\n        </>\n    );\n}\n","import spellForm from \"../static/d66/spell_form.json\";\nimport spellMaterial from \"../static/d66/spell_material.json\";\nimport spellStyle from \"../static/d66/spell_style.json\";\nimport schools from \"../static/d66/schools.json\";\nimport Crucible, { AddlOption } from \"./Crucible\";\nimport GrimwildFooter from \"./GrimwildFooter\";\nimport { Divider } from \"@mui/material\";\n\nexport default function SpellCrucible() {\n    document.title = \"Spell Crucible\";\n    return (\n        <>\n            <h1>Spell Crucible</h1>\n            <Divider sx={{ marginBottom: 8 }} />\n            <Crucible\n                tables={[spellStyle, spellMaterial, spellForm]}\n                titles={[\"Style\", \"Material\", \"Form\"]}\n                additionalOptions={schools as AddlOption[]}\n            />\n            <GrimwildFooter />\n        </>\n    );\n}\n"],"names":["useStyles","makeStyles","theme","root","table","D66","_ref","selected","classes","_jsx","TableContainer","component","props","Paper","className","children","Table","TableBody","map","row","r","TableRow","sx","cell","c","TableCell","includes","backgroundColor","palette","primary","main","color","background","default","undefined","d","sides","Math","floor","random","d6","CrucibleResults","options","n","additionalOptions","defaultSelection","length","selectedRows","_","index","slice","of","firstRowLast","endsWith","reverse","s","o","setSelected","useState","setOf","randomAdditionalOption","selectedAdditionalOption","setSelectedAdditionalOption","rerollAll","useEffect","some","selectedForDisplay","splice","_jsxs","Card","display","maxWidth","textAlign","CardContent","marginTop","style","alignItems","Grid","container","justifyContent","option","optionIndex","indexOf","item","xs","Button","variant","onClick","newSelected","i","findIndex","push","margin","Typography","align","join","spacing","startIcon","SwapHorizIcon","toReversed","RemoveIcon","AddIcon","AdditionalOptions","CardActions","Tooltip","title","IconButton","marginLeft","CasinoIcon","_ref2","selectedString","toString","selectedColor","Number","textColor","colors","Select","value","onChange","e","target","autoWidth","fontSize","MenuItem","name","Crucible","_ref3","tables","titles","selectedInTables","setSelectedInTables","Array","fill","_Fragment","alignContent","size","_e","newSelectedInTables","column","rc","cr","minHeight","minWidth","CardHeader","GrimwildFooter","Box","flexDirection","grey","Container","Link","href","rel","OpenInNewIcon","SpellCrucible","document","Divider","marginBottom","spellStyle","spellMaterial","spellForm","schools"],"sourceRoot":""}